package com.sunny;import android.annotation.TargetApi;import android.content.Context;import android.graphics.Bitmap;import android.graphics.drawable.BitmapDrawable;import android.os.Build;import android.webkit.URLUtil;import android.widget.ImageView;import com.sunny.cache.BaseLoadListener;import com.sunny.cache.CacheWorker;import com.sunny.cache.OnSetImageListener;import com.sunny.cache.CacheWorker.Builder;/** * 1. Keep Clean away from Download. 2. More timely recycle. 3. Priority of * download. *  * @author ning.dai */public class ImageLoader extends CacheWorker {	/**	 * Memory cache!	 */	private static ImageLoader instance;	private int defaultLoadingResouce;	public synchronized static ImageLoader init(Context _context) {		// judge static cover picture		if (instance == null) {			final String path = getCacheFolder(_context.getApplicationContext());			instance = new ImageLoader(_context, "temp", path, true);			// TODO can enable auto clean cache file.			instance.cleanCache = false;		}		return instance;	}	public ImageLoader setDefaultLoading(int resId) {		instance.defaultLoadingResouce = resId;		return instance;	}	@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)	public ImageLoader(Context _context, String tag, String cachePath,			boolean sortASC) {		super(_context, cachePath, sortASC);		this.tag = tag;	}	public static synchronized void loadRemoteImage(String url, ImageView view,			Builder cacheParams, OnSetImageListener setImageListener) {		if (URLUtil.isValidUrl(url)) {			instance.doLoadRemoteImage(url, view, cacheParams, setImageListener);		}	}	public static synchronized void loadRemote(String url, ImageView view,			OnSetImageListener setImageListener) {		if (URLUtil.isValidUrl(url)) {			instance.doLoadRemoteImage(url, view, new Builder(view.getWidth(),					view.getHeight())					.setLoadingImage(instance.defaultLoadingResouce),					setImageListener);		}	}	public static synchronized void loadRemote(String url, ImageView view) {		if (URLUtil.isValidUrl(url)) {			loadRemote(url, view, new BaseLoadListener(view));		}	}	public static synchronized void loadLocal(String filename, ImageView view) {		instance.doLoadLocalImage(filename, view, new Builder(view.getWidth(),				view.getHeight())				.setLoadingImage(instance.defaultLoadingResouce), null,				new BaseLoadListener(view));	}}