package com.llkj.newbjia;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.location.Location;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.Window;
import android.widget.Toast;

import com.amap.api.location.AMapLocalWeatherForecast;
import com.amap.api.location.AMapLocalWeatherListener;
import com.amap.api.location.AMapLocalWeatherLive;
import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.location.LocationManagerProxy;
import com.jeremyfeinstein.slidingmenu.lib.SlidingMenu;
import com.jeremyfeinstein.slidingmenu.lib.app.SlidingFragmentActivity;
import com.llkj.newbjia.chat.Constants;
import com.llkj.newbjia.chat.RecentlyChatFragment;
import com.llkj.newbjia.collection.FavoriteFragment;
import com.llkj.newbjia.fenlei.FenleiFragment;
import com.llkj.newbjia.friend.FriendFragment;
import com.llkj.newbjia.main.MainFragment;
import com.llkj.newbjia.mybijia.MyBijiaFragment;
import com.llkj.newbjia.myorder.OrderCheckFragment;
import com.llkj.newbjia.quanzi.QuanZhiFragment;
import com.llkj.newbjia.setting.MySettingFragment;
import com.llkj.newbjia.shoppingcart.MyCartFragment;
import com.llkj.newbjia.utils.AMapUtil;
import com.llkj.newbjia.utils.LogUtil;
import com.llkj.newbjia.zitidianfenbu.ZitidianfenbuFragment;

public class MainActivity extends SlidingFragmentActivity implements
		AMapLocationListener, AMapLocalWeatherListener {

	private SlidingMenu localSlidingMenu;
	public LeftSlidingMenuFragment mFrag;
	private FragmentManager fm;
	private long mExitTime;

	private Fragment mContent;
	private Fragment mainFragment, fenLeiFragment, quanzhiFragement,
			mySettingFragment, orderCheckFragment, favoriteFragment,
			ziTidianfenbuFragment, myBijiaFragment, myCartFragment,
			friendFragment, recentlyChatFragment;
	private MyReceiver receiver;
	private LocationManagerProxy aMapLocManager = null;
	private AMapLocation aMapLocation;// 用于判断定位超时
	public static MainActivity newstance;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		fm = getSupportFragmentManager();
		MyApplication.getInstance().addActivity(this);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.main);
		initView();
		initSlidingMenu();
		initData();
		receiver = new MyReceiver();
		IntentFilter filter = new IntentFilter();
		filter.addAction(Constants.SWITCHCART);
		registerReceiver(receiver, filter);
		newstance = this;

	}

	private void initData() {
		// TODO Auto-generated method stub
		aMapLocManager = LocationManagerProxy.getInstance(this);
		// aMapLocManager.requestLocationUpdates(
		// LocationProviderProxy.AMapNetwork, 15000, 100, this);
		aMapLocManager.requestWeatherUpdates(
				LocationManagerProxy.WEATHER_TYPE_LIVE, this);
		// MyApplication.hanlder.postDelayed(new Runnable() {
		//
		// @Override
		// public void run() {
		// if (aMapLocation == null) {
		// ToastUtil.makeLongText(MainActivity.this,
		// "12秒内还没有定位成功，停止定位");
		//
		// stopLocation();// 销毁掉定位
		// }
		// }
		// }, 12000);// 设置超过12秒还没有定位到就停止定位
	}

	/**
	 * 销毁定位
	 */
	private void stopLocation() {
		if (aMapLocManager != null) {
			aMapLocManager.removeUpdates(this);
			aMapLocManager.destory();
		}
		aMapLocManager = null;
	}

	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		stopLocation();// 停止定位
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	public void initSlidingMenu() {
		mainFragment = new MainFragment();
		fenLeiFragment = new FenleiFragment();
		quanzhiFragement = new QuanZhiFragment();
		ziTidianfenbuFragment = new ZitidianfenbuFragment();
		mySettingFragment = new MySettingFragment();
		orderCheckFragment = new OrderCheckFragment();
		favoriteFragment = new FavoriteFragment();
		myBijiaFragment = new MyBijiaFragment();
		myCartFragment = new MyCartFragment();
		friendFragment = new FriendFragment();
		recentlyChatFragment = new RecentlyChatFragment();
		mContent = mainFragment;

		fm.beginTransaction().replace(R.id.center_frame, mContent).commit();
		setBehindContentView(R.layout.main_left_layout);// 设置左边的菜单布局
		FragmentTransaction mFragementTransaction = fm.beginTransaction();
		mFrag = new LeftSlidingMenuFragment();
		mFragementTransaction.replace(R.id.main_left_fragment, mFrag);
		mFragementTransaction.commit();
		localSlidingMenu = getSlidingMenu();
		localSlidingMenu.setMode(SlidingMenu.LEFT);// 设置是左滑还是右滑，还是左右都可以滑，我这里只做了左滑
		localSlidingMenu.setBehindOffsetRes(R.dimen.slidingmenu_offset);// 设置菜单宽度
		localSlidingMenu.setFadeDegree(0.35f);// 设置淡入淡出的比例
		localSlidingMenu.setTouchModeAbove(SlidingMenu.TOUCHMODE_MARGIN);// 设置手势模式
		localSlidingMenu.setShadowDrawable(R.drawable.shadow);// 设置左菜单阴影图片
		localSlidingMenu.setShadowWidthRes(R.dimen.shadow_width);
		localSlidingMenu.setFadeEnabled(true);// 设置滑动时菜单的是否淡入淡出
		localSlidingMenu.setBehindScrollScale(0.333f);// 设置滑动时拖拽效果
	}

	private void initView() {

	}

	public void showOrHideMenu() {
		if (localSlidingMenu.isMenuShowing()) {
			localSlidingMenu.showContent();
		} else {
			localSlidingMenu.showMenu();
		}
	}

	public void showOrHideSecondaryMenu() {
		if (localSlidingMenu.isSecondaryMenuShowing()) {
			localSlidingMenu.showContent();
		} else {
			localSlidingMenu.showSecondaryMenu();
		}
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			if (localSlidingMenu.isMenuShowing()
					|| localSlidingMenu.isSecondaryMenuShowing()) {
				localSlidingMenu.showContent();
			} else {
				if ((System.currentTimeMillis() - mExitTime) > 2000) {
					Toast.makeText(this, "在按一次退出", Toast.LENGTH_SHORT).show();
					mExitTime = System.currentTimeMillis();
				} else {
					finish();
				}
			}
			return true;
		}
		// 拦截MENU按钮点击事件，让他无任何操作
		if (keyCode == KeyEvent.KEYCODE_MENU) {
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	/**
	 * 左侧菜单点击切换首页的内容
	 */
	public void switchContent(int type) {

		switch (type) {
		case 0:
			mContent = mainFragment;
			break;
		case 1:
			mContent = fenLeiFragment;
			break;
		case 5:
			mContent = myCartFragment;
			break;
		case 6:
			mContent = favoriteFragment;
			break;
		case 7:
			mContent = friendFragment;
			break;
		case 8:
			mContent = recentlyChatFragment;
			break;
		case 9:
			mContent = quanzhiFragement;
			break;
		case 10:
			mContent = myBijiaFragment;
			break;
		case 11:
			mContent = orderCheckFragment;
			break;
		case 12:
			mContent = ziTidianfenbuFragment;
			break;
		case 13:
			mContent = mySettingFragment;
			break;
		default:
			break;
		}
		replaceFragment(mContent);
		
		getSlidingMenu().showContent();
	}

	class MyReceiver extends BroadcastReceiver {

		@Override
		public void onReceive(Context arg0, Intent intent) {
			// TODO Auto-generated method stub
			String action = intent.getAction();
			if (com.llkj.newbjia.chat.Constants.SWITCHCART.equals(action)) {
//				switchContent(5);
				fm.beginTransaction().replace(R.id.center_frame, myCartFragment).commitAllowingStateLoss();
			}
		}

	}

	private void replaceFragment(Fragment newFragment) {
		FragmentTransaction transaction = fm.beginTransaction();
		if (!newFragment.isAdded()) {
			try {
				transaction.replace(R.id.center_frame, newFragment);
				transaction.addToBackStack(null);
				transaction.commit();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			transaction.show(newFragment);
		}
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		unregisterReceiver(receiver);
	}

	@Override
	public void onLocationChanged(Location arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderDisabled(String arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderEnabled(String arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
		// TODO Auto-generated method stub

	}

	/*
	 * 混合定位回调函数
	 */
	@Override
	public void onLocationChanged(AMapLocation location) {
		if (location != null) {
			this.aMapLocation = location;// 判断超时机制
			Double geoLat = location.getLatitude();
			Double geoLng = location.getLongitude();
			String cityCode = "";
			String desc = "";
			Bundle locBundle = location.getExtras();
			if (locBundle != null) {
				cityCode = locBundle.getString("citycode");
				desc = locBundle.getString("desc");
			}
			String str = ("定位成功:(" + geoLng + "," + geoLat + ")"
					+ "\n精    度    :" + location.getAccuracy() + "米"
					+ "\n定位方式:" + location.getProvider() + "\n定位时间:"
					+ AMapUtil.convertToTime(location.getTime()) + "\n城市编码:"
					+ cityCode + "\n位置描述:" + desc + "\n省:"
					+ location.getProvince() + "\n市:" + location.getCity()
					+ "\n区(县):" + location.getDistrict() + "\n区域编码:" + location
					.getAdCode());
			MyApplication.localcity = location.getCity();
			LogUtil.e(MyApplication.localcity);
		}
	}

	@Override
	public void onWeatherForecaseSearched(AMapLocalWeatherForecast arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onWeatherLiveSearched(AMapLocalWeatherLive aMapLocalWeatherLive) {
		// TODO Auto-generated method stub
		if (aMapLocalWeatherLive != null
				&& aMapLocalWeatherLive.getAMapException().getErrorCode() == 0) {
			// 天气预报成功回调 设置天气信息
			MyApplication.localcity = aMapLocalWeatherLive.getCity();
			MyApplication.localWeather = aMapLocalWeatherLive.getWeather();
			MyApplication.localTemperature = aMapLocalWeatherLive
					.getTemperature() + "℃";
			MyApplication.localWindDir = aMapLocalWeatherLive.getWindDir()
					+ "风";
			MyApplication.localWindPower = aMapLocalWeatherLive.getWindPower()
					+ "级";
			MyApplication.localReportTime = aMapLocalWeatherLive
					.getReportTime();
			MyApplication.localHumidity = aMapLocalWeatherLive.getHumidity()
					+ "%";
			mFrag.setWeather();

		} else {

			// 获取天气预报失败
			Toast.makeText(
					this,
					"获取天气预报失败:"
							+ aMapLocalWeatherLive.getAMapException()
									.getErrorMessage(), Toast.LENGTH_SHORT)
					.show();

		}
	}
}
