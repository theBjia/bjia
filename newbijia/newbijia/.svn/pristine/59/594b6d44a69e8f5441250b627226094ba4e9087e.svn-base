package com.llkj.newbjia.http;

import java.io.IOException;
import java.net.URISyntaxException;

import javax.xml.parsers.ParserConfigurationException;

import org.json.JSONException;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;

import com.llkj.cm.restfull.exception.RestClientException;
import com.llkj.cm.restfull.service.WorkerService;

/**
 * This class is called by the {@link PoCRequestManager} through the
 * {@link Intent} system. Get the parameters stored in the {@link Intent} and
 * call the right Worker. f
 * 
 * @author Foxykeep
 */
public class PoCService extends WorkerService {

	private static final String LOG_TAG = PoCService.class.getSimpleName();

	// Max number of parallel threads used
	private static final int MAX_THREADS = 5;

	public static final int ADD_CONTROL_TYPE_COMMODITY = 1;
	public static final int ADD_CONTROL_TYPE_PT = 2;
	public static final int ADD_CONTROL_TYPE_PHOTO = 3;
	public static final int ADD_CONTROL_TYPE_TEXT = 4;
	public static final int ADD_CONTROL_TYPE_VOICE = 5;
	public static final int ADD_CONTROL_TYPE_CURRENT_PAGE = 6;
	public static final int ADD_CONTROL_TYPE_ROUTE = 7;
	public static final int ADD_CONTROL_TYPE_ADDRESS_WALL = 8;
	public static final int ADD_CONTROL_TYPE_GROUP = 9;
	public static final int ADD_CONTROL_TYPE_WEBPAGE = 10;

	// Worker types
	/**
	 * 1.1获取验证码
	 */
	public static final int TYPE_INDEX_GETCODE = 0x11;
	/**
	 * 1.2注册
	 */
	public static final int TYPE_INDEX_REGISTER = 0x12;
	/**
	 * 1.3登录
	 */
	public static final int TYPE_INDEX_LOGIN = 0x13;
	
	/**
	 * 1.4找回密码
	 */
	public static final int TYPE_INDEX_FORGETPOSSWORD = 0x14;
	
	/**
	 * 1.4个人信息
	 */
	public static final int TYPE_INDEX_PERSONDESC = 0x15;
	
	/**
	 * 1.5修改个性签名
	 */
	public static final int TYPE_INDEX_SIGNEDIT = 0x16;
	
	/**
	 * 1.5修改用户名
	 */
	public static final int TYPE_INDEX_NAMEEDIT = 0x17;
	
	/**
	 * 1.6我的积分
	 */
	public static final int TYPE_INDEX_MYINTEGRAL = 0x18;
	
	/**
	 * 1.6我的彼佳币
	 */
	public static final int TYPE_INDEX_MYCOIN = 0x19;

	public PoCService() {
		super(MAX_THREADS);
	}

	@Override
	protected void onHandleIntent(final Intent intent) {
		// This line will generate the Android User Agent which will be used in
		// your webservice calls if you don't specify a special one
		// NetworkConnection.generateDefaultUserAgent(this);

		int workerType = intent.getIntExtra(INTENT_EXTRA_WORKER_TYPE, -1);

		try {
			switch (workerType) {
			// TODO 可以考虑在返回方法里增加文件缓存.参见新浪乐居FixCacheManger
			case TYPE_INDEX_GETCODE:
				sendSuccess(intent, HTTPWorker.startGetCode(intent));
				break;
			case TYPE_INDEX_REGISTER:
				sendSuccess(intent, HTTPWorker.startRegister(intent));
				break;
			case TYPE_INDEX_LOGIN:
				sendSuccess(intent, HTTPWorker.startLogin(intent));
				break;
			case TYPE_INDEX_FORGETPOSSWORD:
				sendSuccess(intent, HTTPWorker.startForgetpassword(intent));
				break;
				
			case TYPE_INDEX_PERSONDESC:
				sendSuccess(intent, HTTPWorker.startPersonDesc(intent));
				break;
			case TYPE_INDEX_SIGNEDIT:
				sendSuccess(intent, HTTPWorker.startSignEdit(intent));
				break;
			case TYPE_INDEX_NAMEEDIT:
				sendSuccess(intent, HTTPWorker.startNameEdit(intent));
				break;
			case TYPE_INDEX_MYINTEGRAL:
				sendSuccess(intent, HTTPWorker.startMyIntegral(intent));
				break;
			case TYPE_INDEX_MYCOIN:
				sendSuccess(intent, HTTPWorker.startMyCoin(intent));
				break;
			}

		} catch (final IllegalStateException e) {
			Log.e(LOG_TAG, "IllegalStateException", e);
			sendConnexionFailure(intent, null);
		} catch (final IOException e) {
			Log.e(LOG_TAG, "IOException", e);
			Bundle bundle = new Bundle();
			bundle.putSerializable("IOException", e);
			sendConnexionFailure(intent, bundle);
		} catch (final URISyntaxException e) {
			Log.e(LOG_TAG, "URISyntaxException", e);
			sendConnexionFailure(intent, null);
		} catch (final RestClientException e) {
			Log.e(LOG_TAG, "RestClientException", e);
			Bundle bundle = new Bundle();
			bundle.putInt("errorStatus", e.getErrorStatus());
			sendConnexionFailure(intent, bundle);
		} catch (final ParserConfigurationException e) {
			Log.e(LOG_TAG, "ParserConfigurationException", e);
			sendDataFailure(intent, null);
		} catch (final JSONException e) {
			Log.e(LOG_TAG, "JSONException", e);
			sendDataFailure(intent, null);
		}
		// This block (which should be the last one in your implementation)
		// will catch all the RuntimeException and send you back an error
		// that you can manage. If you remove this catch, the
		// RuntimeException will still crash the PoCService but you will not be
		// informed (as it is in 'background') so you should never remove this
		// catch
		catch (final RuntimeException e) {
			Log.e(LOG_TAG, "RuntimeException", e);
			sendDataFailure(intent, null);
		}
	}
}
